// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  email            String            @unique
  username         String?
  phone            Int?
  password         String
  role             Role              @default(USER)
  transactions     Transaction[]
  images           Image[]
  budgets          Budget[]
  categoryBudgets  CategoryBudget[]
  reminders        Reminder[]
  goals            Goal[]
  goalTransactions GoalTransaction[]
}

model Transaction {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String?
  amount      Int
  date        DateTime
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  image       Image?    @relation(fields: [imageId], references: [id])
  imageId     Int?
}

model Category {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String           @unique
  description     String?
  transactions    Transaction[]
  categoryBudgets CategoryBudget[]
}

model Budget {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  month           String
  year            String
  targetBudget    Int
  currentBudget   Int
  user            User?            @relation(fields: [userId], references: [id])
  userId          Int?
  categoryBudgets CategoryBudget[]
}

model CategoryBudget {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  month         String
  year          String
  targetBudget  Int
  currentBudget Int
  user          User?     @relation(fields: [userId], references: [id])
  userId        Int?
  budget        Budget?   @relation(fields: [budgetId], references: [id])
  budgetId      Int?
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    Int?
}

model Reminder {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  date      DateTime
  message   String
  type      ReminderType @default(DailyTransaction)
  user      User?        @relation(fields: [userId], references: [id])
  userId    Int?
}

model Image {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  url          String
  title        String
  user         User?         @relation(fields: [userId], references: [id])
  userId       Int?
  transactions Transaction[]
}

model Goal {
  id            Int               @id @default(autoincrement())
  title         String
  targetAmount  Float
  currentAmount Float
  progress      Float
  targetDate    DateTime
  achieved      Boolean           @default(false)
  description    String?
  user          User?             @relation(fields: [userId], references: [id])
  userId        Int?
  transactions  GoalTransaction[]
}

model GoalTransaction {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  amount      Int
  month       String
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  goal        Goal?    @relation(fields: [goalId], references: [id])
  goalId      Int?
}

enum Role {
  USER
  ADMIN
}

enum ReminderType {
  DailyTransaction
  MonthlyBudget
}
